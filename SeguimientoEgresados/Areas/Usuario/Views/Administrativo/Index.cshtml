@model Usuario

@{
    ViewBag.Title = "Administrativo";
    int item = (int)(ViewData["SidebarItem"] ?? 1);
}

@* <h3>Bienvenido al sistema @Html.DisplayFor(m => m.Nombre)</h3> *@
<div class="main-container container-fluid p-4" style="overflow-y: scroll">
    <div class="row h-100">
        <div class="col-12 col-md-4 col-lg-4 col-xl-2 mb-3">
            @* @await Html.PartialAsync("SidebarAdministrativo") *@
            <div class="list-group">
                <a href="#" id="inicio" data-url="@Url.Action("General")" class='list-group-item list-group-item-action active' aria-current="true">
                    <i class="fa-regular fa-file-lines mx-2"></i>General
                </a>
                <a href="#" data-url="@Url.Action("Egresados")" class='list-group-item list-group-item-action '>
                    <i class="fa-solid fa-graduation-cap mx-2"></i>Egresados
                </a>
                <a href="#" data-url="@Url.Action("Empleadores")" class='list-group-item list-group-item-action '>
                    <i class="fa-solid fa-briefcase mx-2"></i>Empleadores
                </a>
                <a href="#" data-url="@Url.Action("Galeria")" class='list-group-item list-group-item-action '>
                    <i class="fa-solid fa-image mx-2"></i>Galería
                </a>
                @* <a href="#" data-url="@Url.Action("CambiosPassword")" class='list-group-item list-group-item-action '> *@
                @*     <i class="fa-solid fa-unlock mx-2"></i>Cambios de contraseña *@
                @* </a> *@
                <a href="#" data-url="@Url.Action("Reportes")" class='list-group-item list-group-item-action '>
                    <i class="fa-solid fa-comment mx-2"></i>Quejas y reportes
                </a>
            </div>
        </div>
        <div class="bg-white col-12 col-md-8 col-lg-8 col-xl-10 border rounded p-2 d-flex justify-content-center" id="vista">
        </div>
    </div>
</div>

@section Scripts
{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
    
        // $(function (){
        //
        //     $('#vista').on('DOMSubtreeModified', function(){
        //       console.log('changed');
        //     });
        // });
    
        window.addEventListener('DOMContentLoaded', (event) => {
            const vista = document.getElementById('vista');
    
            let lastItem = document.getElementById("inicio");
            const firtsUrl = lastItem.dataset.url;
            fetch(firtsUrl)
            .then(res => res.text())
            .then(body => {
                vista.innerHTML = body;
            });
    
            const links = document.getElementsByClassName('list-group-item');
    
            for(let i = 0; i < links.length; i++){
                links[i].addEventListener('click', (event) => {
    
                    if(event.target === lastItem)
                        return;
    
                    event.target.classList.add('active');
                    lastItem.classList.remove('active');
                    lastItem = event.target;
    
                    const url = event.target.dataset.url;
    
                    fetch(url)
                    .then(res => res.text())
                    .then(body => {
                        vista.innerHTML = body;
                        updateView();
                    });
                });
            }
        });
    
        let order = "";
    
        function updateView(){
            //const cont = document.getElementById('contenido');
            const contenidosAcargar = document.getElementsByClassName("to-load");
    
            for (let i = 0; i < contenidosAcargar.length; i++){
                const dataUrl = contenidosAcargar[i].dataset.url;
    
                contenidosAcargar[i].innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
                fetch(dataUrl)
                .then(res => res.text())
                .then(body => {
                    contenidosAcargar[i].innerHTML = body;
    
                    const buscador = document.getElementById("busqueda");
    
                    order = "";
                    if(buscador != null){
    
                        buscador.addEventListener('input', (event) => actualizarTabla(buscador.dataset.tabla, 1, order));
                    }
                });
            }
        }
    
        function actualizarTabla(idTabla, pagina = 1, ordenTabla = null){
    
            const orden = ordenTabla === null ? order : ordenTabla;
            order = orden;
            const busquedaInput = document.getElementById("busqueda");
            const busqueda = busquedaInput ? document.getElementById("busqueda").value : "";
            const filtroActual = "@ViewData["Busqueda"]";
            const checkVerificados = document.getElementById("verificados");
            const verificados = checkVerificados != null ? checkVerificados.checked : false;
    
            const cont = document.getElementById(idTabla);
            const action = cont.dataset.url;
            const url = action + "?" + `ordenTabla=${orden}&busqueda=${busqueda}&filtroActual=${filtroActual}&pagina=${pagina}&verificados=${verificados}`;
    
            cont.classList.remove('table-responsive');
            cont.innerHTML = '<div class="col-12 p-4 d-flex justify-content-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            
            fetch(url)
            .then(res => res.text())
            .then(body => {
                cont.classList.add('table-responsive');
                cont.innerHTML = body;
            });
        }
        
        async function previsualizarImagenes(imagenes){
            const imgs = imagenes.files;
            const contenedor = document.getElementById("previews");
            
            for (let i = 0; i < imgs.length; i++){
                const img = imgs[i];
                console.log(img);
                
                const prev = document.createElement("div");
                prev.classList.add("col-12", "col-md-6", "col-lg-4", "animate__animated", "animate__faster", "animate__zoomIn");
                const bg = document.createElement("div");
                bg.classList.add("border", "rounded", "mx-1", "my-2", "p-3", "bg-light");
               
                
                const imgElement = document.createElement("img");
                imgElement.classList.add("img-fluid", "rounded", "border");
                imgElement.src = window.URL.createObjectURL(img);
                
                bg.appendChild(imgElement);
                
                bg.innerHTML += `
                <hr class="invisible"/>
                <div class="my-3 d-flex align-items-center">
                    <i class="fa-solid fa-heading me-2"></i>
                  <input name="nombresImgs" type="text" class="form-control form-control-sm" placeholder="Título" value="${img.name}">
                </div>
                <div class="mb-3 d-flex align-items-center">
                  <i class="fa-solid fa-comment me-2"></i>
                  <textarea name="descImgs" type="text" class="form-control form-control-sm" placeholder="(Opcional) Descripción"></textarea>
                </div>
                <div class="mb-3 d-flex align-items-center">
                    <i class="fa-solid fa-tag me-2"></i>
                    <input name="tagsImgs" type="text" class="form-control form-control-sm" placeholder="(Opcional) Tags, ej. Grupo 1 ISC, Mecatrónica, Grupo 4 Gestión, etc.">
                </div>
                `;
                
                prev.appendChild(bg);
                contenedor.appendChild(prev);
                await timer(200);
            }
        }
        
        let modalVerificarEmpleador;
        function abrirEmpleador(id){
            const url = "@Url.Action("_VerificarEmpleador")?id=" + id;
            fetch(url)
            .then(res => res.text())
            .then(html => {
                document.getElementById("modalEmpleador").innerHTML = html;
                
                document.getElementById('verEmp').addEventListener('submit', evt => {
                   evt.preventDefault();
                   
                   verificarEmpleador(evt.target.dataset.id, evt.target.dataset.url);
                });
                
                modalVerificarEmpleador = new bootstrap.Modal(document.getElementById('modalVerificarEmpleador'));
                modalVerificarEmpleador.show();
            });
        }
        
        function verificarEmpleador(id, url){
            if (url === ""){
                modalVerificarEmpleador.toggle();
                return;
            }
            
            url += "?id=" + id;
            
            fetch(url, { method: 'POST' })
            .then(res => res.ok)
            .then(data => {
                modalVerificarEmpleador.toggle();
               actualizarTabla("tablaEmpleadores", 1); 
            });
        }
        
        let modal;
        
        function verReporte(row){
            const id = row.dataset.id;
            const url = `@Url.Action("VerReporte")?id=${id}`;
            
            fetch(url)
            .then(res => res.text())
            .then(html => {
                const cont = document.getElementById("contModalVerReporte");
                cont.innerHTML = html;
                modal = new bootstrap.Modal(document.getElementById('modalVerReporte'));
                modal.show();
            });
        }
        
        function revisarReporte(btn, id){
            btn.disabled = true;
            const url = `@Url.Action("RevisarReporte")?id=${id}`;
            
            fetch(url, { method: 'post' })
            .then(res => res.ok)
            .then(ok => {
                modal.toggle();
                
                actualizarTabla("tablaReportes");
            });
        }
    </script>
}